pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- pico miner
-- by divoolej

-- colors
local black  = 0
local navy   = 1
local purple = 2
local slate  = 3
local brown  = 4
local gray   = 5
local silver = 6
local white  = 7
local red    = 8
local orange = 9
local yellow = 10
local green  = 11
local blue   = 12
local indigo = 13
local pink   = 14
local beige  = 15

-- controls
local left   = 0
local right  = 1
local up     = 2
local down   = 3
local action = 4

-- core functions
function _init()
	menu:init()
end

function _update()
	if game.state == "menu" then
		menu:update()
	elseif game.state == "game" then
		game:update()
	end
end

function _draw()
	if game.state == "menu" then
		menu:draw()
	elseif game.state == "game" then
		game:draw()
	end
end
-->8
-- main menu

local options = {
	{
		is_selected = true,
		text = "new run",
		callback = function()
			game:init()
		end,
	},
	{
		is_selected = false,
		text = "exit",
		callback = function()
			cls()
			stop()
		end,
	},
}

function for_selected_option(self, callback)
	local index, option
	for index,option in pairs(self.options) do
		if option.is_selected then
			callback(option, index)
			break
		end
	end
end

function init_menu(self)
	game.state = "menu"
end

function draw_menu(self)
	cls()
	-- draw background
	map(16, 0, 0, 0, 16, 16)
	-- draw logo
	rectfill(38, 22, 80, 30, black)
	print("pico miner", 40, 24, blue)
	-- draw options
	rectfill(38, 48, 80, 50 + #options * 8, black)
	local index, option
	for index, option in pairs(self.options) do
		if option.is_selected then
			print("➡️ "..option.text, 40, 43 + index * 8, green)
		else
			print(option.text, 52, 43 + index * 8, blue)
		end
	end
end

function update_menu(self)
	if btnp(action) then
		self:for_selected_option(function(option)
			option.callback()
		end)
	end
	if btnp(down) then
		self:for_selected_option(function(option, index)
			option.is_selected = false
			self.options[index % #self.options + 1].is_selected = true
		end)
	elseif btnp(up) then
		self:for_selected_option(function(option, index)
			option.is_selected = false
			self.options[(index - 2) % #self.options + 1].is_selected = true
		end)
	end
end

menu = {
	options = options,
	for_selected_option = for_selected_option,
	init = init_menu,
	draw = draw_menu,
	update = update_menu,
}
-->8
-- game

function init_game(self)
	self.state = "game"
	player:init()
end

function can_move(self, direction)
	return not (direction == down)
end

function can_dig(self, direction)
 if (direction == down) return true
 return false
end

function has_floor(self, x, y)
 if (y >= 7) return true
 return false
end

function process_dig(self)
end

function update_game(self)
	player:update()
end

function draw_game(self)
	cls()
	-- draw background
	map(0, 0, 0, 0, 16, 9)
	-- draw player
	player:draw()
end

game = {
	can_move = can_move,
	can_dig = can_dig,
 has_floor = has_floor,
 dig = process_dig,
	init = init_game,
	update = update_game,
	draw = draw_game,
}
-->8
-- player

function init_player(self)
	self.x = self.x_grid * 8
	self.y = self.y_grid * 8
 self.is_facing_left = self.direction == left
end

function start_digging(self)
 self.state = "dig"
 self.current_sprite = 16
end

function start_moving(self)
 self.state = "move"
 self.current_sprite = 0
end

function start_falling(self)
 self.state = "fall"
 self.animation_frame = 0
 self.current_sprite = 6
end

function stop_player(self)
	self.animation_frame = 0
 self.current_sprite = 0
	self.state = "idle"
end

function move_or_dig(self)
 self.animation_frame = 0
	if game:can_move(self.direction) then
		self:start_moving()
	elseif game:can_dig(self.direction) then
		self:start_digging()
	end
end

function idle(self)
 if (self.animation_frame == 1) self.current_sprite = 0
 if (self.animation_frame == 15) self.current_sprite = 4
 if (self.animation_frame == 30) self.current_sprite = 0
 if (self.animation_frame == 45) self.current_sprite = 5
 if (self.animation_frame >= 55) self.animation_frame = 0
end

function check_position(self)
 if game:has_floor(self.x_grid, self.y_grid) then
  self:stop()
 else
  self:start_falling()
 end
end

function move(self)
	if self.animation_frame % 2 == 0 then
  if self.direction == left then
 		self.x -= 1
 	else
 		self.x += 1
 	end
 end
 if (self.animation_frame % 4 == 0) self.current_sprite += 1
	if self.animation_frame >= 15 then
  if self.direction == left then
   self.x_grid -= 1
  else
   self.x_grid += 1
  end
  self:check_position()
 end
end

function dig(self)
 if (self.animation_frame % 3 == 0) self.current_sprite += 1
 if self.animation_frame >= 21 then
  self:stop()
  game:dig(self.x_grid, self.y_grid, self.direction)
 end
end

function fall(self)
 self.y += 2
 if (self.animation_frame <= 1) self.current_sprite = 6
 if (self.animation_frame == 3) self.current_sprite = 7
 if self.animation_frame >= 4 then
  self.y_grid += 1
  self:check_position()
 end
end

function handle_controls(self)
	if btnp(left) then
  self.is_facing_left = true
  self.direction = left
		self:move_or_dig()
	elseif btnp(right) then
  self.is_facing_left = false
  self.direction = right
		self:move_or_dig()
	elseif btnp(down) then
  self.direction = down
		self:move_or_dig()
	end
end

function update_player(self)
 self.animation_frame += 1
	if (self.state == "idle") then
  self:idle()
  self:handle_controls()
 end
	if (self.state == "move") self:move()
 if (self.state == "dig") self:dig()
 if (self.state == "fall") self:fall()
end

function draw_player(self)
	spr(self.current_sprite, self.x, self.y, 1, 1, self.is_facing_left)
end

player = {
	x_grid = 8,
	y_grid = 0,
	current_sprite = 0,
	animation_frame = 0,
	state = "fall",
	direction = left,
	start_moving = start_moving,
	start_digging = start_digging,
 start_falling = start_falling,
 idle = idle,
	move = move,
 dig = dig,
 fall = fall,
	stop = stop_player,
 check_position = check_position,
 move_or_dig = move_or_dig,
	handle_controls = handle_controls,
 init = init_player,
	update = update_player,
	draw = draw_player,
}
__gfx__
0033000000330000003300000033000000330000003300000033000000330000000000004444444444444444445444594404440144544456445444574494449a
03aa000003aa000003aa000003aa000003aa000003aa000003aa066003aa0660000000004444444444444444455945954001400046264562476745764afa49af
00aa066000aa066000aa066000aa066000aa066000aa0660a0aa004600aa00460000000046444444444444444595445440104404456544244575446449a944f4
0d55d0460d55d0460d55d0460d55d0460d55d0460d55d0460d55da06ad55da060000000044444444444444444455444444004444445444444454444444944444
0a550a060a550a0600a50a06a0550a06a0550a0600a50a06005540000055400000000000444444d444444444444459444444014444442644444467444444fa44
005540000055400000554000005540000055400000554000005500000055000000000000444444444444444445459544404010444542654445467544494fa944
0a00a00000a0a00000a0a00000a0a0000a00a0000a00a0000a00a0000a00a00000000000444d44444444444495495444014004446246544476475444af4a9444
0200200002002000020020000200200002002000020020000200200002002000000000004444444444444444495444444004444446244444476444444af44444
003300000033000000330000003300000033066000330010033001000033000000000000cccccccccccccccc33333333cccccccc444444444444444f44d444dc
03aa000003aa000003aa000003aa000003aa004603aa10013aa0000103aa000000000000c7cccccccccccccc44444444cccccccc44444444444444444c7c4dc6
00aa066000aa066000aa066000aa006000aa040600aa01600aa0000000aa006000000000cccc7ccccccccccc54444444cccccccc444444444d4444444dcd4464
0d55d0460d55d04600d5d04600d5d00600d5a00000d5d006055d00100555d00600000000cc7777cccccccccc44444d44cccccccc444744444444444444d44444
0a550a0600a50a06005a0a06005a4a46005a0001005a4a460550a0000a554a4600000000c7777ccccccccccc44444444cccccccc444444444444444444447c44
005540000055400000554000005500060055001000550006055004060055000600000000cc7ccc7ccccccccc44444444ccecc3cc44444444444444644d47cd44
0a00a0000a00a0000a00a0000a00a0600a00a0000a00a060a00a00460a00a06000000000ccccc777cccccccc4d444444cc3ccc3c4444441445444444c74cd444
020020000200200002002000020020000200200002002000200206600200200000000000cccccccccccccccc44444444c3ccc3cc44444444444444444c744444
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004454444444544544540550540000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000451515d4401505d0505555550000000000005000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044551d5605001d06055055550445544004000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004551555540510555550550550f4554f000500040
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055d0545555d050050555555004ff4ff000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000005115555450150550550550550ff4ff4000005000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004651555446015004555555500f4ff4f004000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004444454444055444450550451111111100000000
__gff__
0000000000000000000300030303030300000000000000000003030101030303030303030300000000030303030300030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1a1a1a1a1a1a1a1a1a1a1a1a1a1a191a0b0b0b0b0b0d0d0b0b0b0b0b0b0b0b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1a191a1a1a191a1a1a1a1a1a1a191a1a0b0c0d0c0c0d0d0d0e0e0d0d0f0d0f0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1a1a1a1a1a1a191a1a1a1a1a1a1a1a1a0b0b0c0c0f0f0f0c0d0f0f0c0f0d0d0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1a1a1a1a1a1a1a1a1a1a191a1a1a1a1a0b0c0b0d0d0b0b0b0b1f0d0c0f0d0e0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1a1a1a1a1a191a1a1a1a1a1a1a191a1a0b0d0d0d0b0b0c0f1f0e0d0d0f0f0e0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1a1a191a1a1a1a1a1a1a1a1a1a1a1a1a0b0d0d0b0b0d0f0f0e0e0e0d0d0f0c0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a0b0c0b0b0e1f0e0b0b0e0e0f0e0f0f0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c0b0c0d0b0e0e0b0f0e0e0e0f1f0b0f0f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b0b0e0b1f0d0b0c0e0f0e0e0c0b0d0c0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000b0e0b0f0d0d0f0e0e1f0c0e0f1f0d0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000b0e0b0e0f0c0e0e1f0e1f0b0e0b0e0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000b0e0e0f0c0f0d0e0d1f0e0e0c0b0e0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000b1f0e0e0d0c0c0b0e0e1f1f0b0f0e0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000b0c0b0e0e0d0d0b0f0d0d0b0f0e0e0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000b0c0e0c0d0e0e0e0f0f0d0f0d0d0e0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000b0b0b0e0e0e0b0b0d0e0e0e0e0e0e0d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000d6500f6500d650000000d6500f650126502465012650146500d6500d6500f65012650016502925001650016500265003650046500465005650056500565005650056502465005650162501425025050
